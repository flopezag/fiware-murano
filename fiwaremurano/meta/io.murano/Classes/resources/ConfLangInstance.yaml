Namespaces:
  =: io.murano.resources
  sys: io.murano.system
  std: io.murano

Name: ConfLangInstance

Extends:
  -  LinuxMuranoInstance

Methods:
 prepareUserData:
    Body:
      - $userData: $._generateUserData()
      - Return:
         data: $._generateInstanceConfigResources($userData)
         format: RAW

 _generateInstanceConfigResources:
    Arguments:
    - userData:
        Contract: $.string().notNull()
    Body:
    - $environment: $.find(std:Environment).require()
    - $cloudInitConf: $._generateCloudConfig()
    - $bootConfigResourceName: format('boot_config_{0}', $.name)
    - $bootScriptResourceName: format('boot_script_{0}', $.name)
    - $userDataResourceName: format('user_data-{0}', $.name)
    - $template:
          resources:
            $bootConfigResourceName:
              type: 'OS::Heat::CloudConfig'
              properties:
                cloud_config: $cloudInitConf
            $bootScriptResourceName:
              type: 'OS::Heat::SoftwareConfig'
              properties:
                group: ungrouped
                config: $userData
            $userDataResourceName:
              type: 'OS::Heat::MultipartMime'
              properties:
                parts:
                - config: {get_resource: $bootConfigResourceName}
                - config: {get_resource: $bootScriptResourceName}

    - $environment.stack.updateTemplate($template)
    - Return: {get_resource: $userDataResourceName}

 _generateUserData:
    Body:
      - Return: list($.super($._generateUserData()))[0]

 _generateCloudConfig:
    Body:
        - $resources: new(sys:Resources)
        - $cloudConfigData: list($.super($._generateCloudConfig()))[0]
        - $confLang: $resources.yaml('conflang.conf')
        - $cloudInitConf: $cloudConfigData.mergeWith($confLang)
        - Return: $cloudInitConf
